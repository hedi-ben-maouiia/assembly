# The Stack 1 

* A stack is a Last_In_First_Out (LIFO) data structure
where data is "pushed" on to the top of the stack and
"popped" off the top 
* The stack is a conceptual area of main memory (RAM)
which is designated by the OS when a program is started
 -Different OSes start it at different addresses by their
 own conventionn,or if they'reusing address space layout randomization (ASLR)

## The Stack 2

* By  convention the stack grows toward lower memory addresses.
Adding something to the stack means the top of the stack is now at lower memory addresses

* Stack Grows Down and the Heap Grows Up 

### The Stack 3

* RSP points to the top of the stack - the lowest addresses which is being used
    - While data will exist at addresses beyond the top of the stack, it is considered undefined

#### The Stack 4

* What can you find on the stack?

* "Return addresses" so a called function can return back to the function that called it.
* Local variables
* Sometimes used to pass arguments between function 
* Save space for regesters so functions can share registers without smashing the value for each other 
* Dynamically allocated memory via alloca()
